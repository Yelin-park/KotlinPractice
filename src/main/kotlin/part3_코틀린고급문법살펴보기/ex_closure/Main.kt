package part3_코틀린고급문법살펴보기.ex_closure

/*
[클로저(Closure)]
 - 지역 변수는 항상 자신이 소속된 블록이 끝나면 소멸하는데
   클로저라는 것을 이용하여 지역 변수가 소멸하지 않는 것처럼 보이도록 할 수 있다.
* */

// () -> Unit 타입의 함수를 반환하는 returnFunc 함수 선언
fun returnFunc(num: Int): () -> Unit = { println(num) }

fun main() {
    // returnFunc 함수가 반환한 함수를 f 잠조 변수에 저장
    val f: () -> Unit = returnFunc(30)
    f()
}

/* f를 호출하면 num 매개변수가 사라지고 없을텐데 위의 main 안에 있는 코드가 가능한 이유는
함수 리터럴이 자신이 만들어질 때의 상황을 기억하고 있기 때문이다.
함수 리터럴이 만들어지는 순간, 함수 리터럴은 자기 주변의 상황을 함께 저장한다.
즉, 함수가 만들어질 때 num 매개변수의 값을 복사해 갖고 있는다.
이렇게 함수가 만들어질 때 주변 상황을 기억하는 함수를 클로저라고 한다. */